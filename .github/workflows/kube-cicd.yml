# This workflow will build a docker container, publish it to Jfrog Artifactory Registry, and deploy it to Kubernetes Cluster when there is a push to the specified branch (main branch).
#
# To configure this workflow:
#
# [Pre-requisites]
# 1. Create Kubeconfig with IP, tls settings, context (username, cluster-name, namespace) and base64 encode config file to store it as a secret in KUBE_CONFIG
#
# 2. Ensure that KUBE_CONFIG, JFROG_USERNAME, JFROG_PASSWORD github secrets have been added to the repo.
#    # Set Kubeconfig context:
#    kubectl config set-context <CONTEXT_NAME> --namespace=<NAMESPACE> --cluster=<CLUSTER_NAME> --user=<USER_NAME>
#    kubectl config set-context --current --namespace=<insert-namespace-name-here>
#    # Disable cert checking for the dev cluster entry
#    kubectl config set-cluster default --insecure-skip-tls-verify=true
#
# 3. Add secret to the cluster to pull image from JFROG Registry (Refer: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
#
# 4. Edit TODO items in the code accordingly 


name: Build and Deploy to Kubernetes

on:
  push:
    branches:
      - main

env:
  DEPLOYMENT_NAME: 2048-app # TODO: update deployment name
  IMAGE: 2048 # TODO: update to image name
  REPO: kubepoc.jfrog.io/default-docker-virtual #TODO: Update full repo name

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup Kube config credentials (Base encode config file and store it in github secrets: $cat ~/.kube/config | base64):
    - name: Create kubeconfig
      run: |-
        mkdir -p ${HOME}/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ${HOME}/.kube/config
        cat ${HOME}/.kube/config


    # Set Kubeconfig context
    - name: Use context
      run: kubectl config use-context kube-poc




    # Docker Login JFROG SaaS
    - name: Docker Login
      run: |
        docker login -u "${{ secrets.JFROG_USERNAME }}" -p "${{ secrets.JFROG_PASSWORD }}" $REPO



    # Build the Docker image / Dockerize
    - name: Build
      run: |-
        docker build \
          --tag "$REPO/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to JFROG Artifactory Container Registry
    - name: Publish
      run: |-
        docker push "$REPO/$IMAGE:$GITHUB_SHA"



    # # Create kubernetes secret to pull images from JFROG private registry
    # - name: Create JFROG kubernetes secret
    #   run: |
    #     kubectl create secret docker-registry regcred --docker-server=$REPO --docker-username="${{ secrets.JFROG_USERNAME }}" --docker-password="${{ secrets.JFROG_PASSWORD }}"

      


    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the Kubernetes cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image REPO/IMAGE:TAG=$REPO/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide



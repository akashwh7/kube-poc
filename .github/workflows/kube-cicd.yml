# This workflow will build a docker container, publish it to Jfrog Artifactory Registry, and deploy it to Kubernetes Cluster when there is a push to the specified branch (main branch).
#
# To configure this workflow:
#
# [Pre-requisites]
# 1. Create Kubeconfig with IP, tls settings, context (username, cluster-name, namespace) and base64 encode config file to store it as a secret in KUBE_CONFIG
#
# 2. Ensure that KUBE_CONFIG, DOCKER_CONFIG github secrets have been added to the repo.
#    # Set Kubeconfig context:
#    kubectl config set-context <CONTEXT_NAME> --namespace=<NAMESPACE> --cluster=<CLUSTER_NAME> --user=<USER_NAME>
#    kubectl config set-context --current --namespace=<insert-namespace-name-here>
#    # Disable cert checking for the dev cluster entry
#    kubectl config set-cluster default --insecure-skip-tls-verify=true
# 
# [FOR GKE (Google Kubernetes Engine): Uncomment GKE code and comment Kube config code]
#   1. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#   2. Change the values for the GKE_ZONE, GKE_CLUSTER  environment variables (below).
#   3. For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke
#
# 3. Add secret to the cluster to pull image from JFROG Registry (Refer: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
#
# 4. Edit TODO items in the code accordingly 


name: Build and Deploy to Kubernetes

on:
  push:
    branches:
      - kube-test

env:
  DEPLOYMENT_NAME: 2048-app # TODO: update deployment name
  IMAGE: 2048 # TODO: update to image name
  REPO: kubepoc.jfrog.io/default-docker-virtual #TODO: Update full repo name
  # GKE_PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }} # TODO Update GKE Project ID
  # GKE_CLUSTER: kube-cluster    # TODO: update to cluster name
  # GKE_ZONE: asia-south1-a   # TODO: update to cluster zone

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production


    steps:
    - name: Checkout
      uses: actions/checkout@v2


    # # GKE: Setup gcloud CLI
    # - uses: google-github-actions/setup-gcloud@v0.2.0
    #   with:
    #     service_account_key: ${{ secrets.GKE_SA_KEY }}
    #     project_id: ${{ secrets.GKE_PROJECT_ID }}

    # # GKE: Get the GKE credentials so we can deploy to the cluster
    # - uses: google-github-actions/get-gke-credentials@v0.2.1
    #   with:
    #     cluster_name: ${{ env.GKE_CLUSTER }}
    #     location: ${{ env.GKE_ZONE }}
    #     credentials: ${{ secrets.GKE_SA_KEY }}              

# Setup Kube config credentials (Base encode config file and store it in github secrets: $cat ~/.kube/config | base64):
    - name: Create Kubeconfig
      run: |-
        mkdir -p ${HOME}/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ${HOME}/.kube/config
        # cat ${HOME}/.kube/config


# Set Kube config context
    - name: Use context
      run: kubectl config use-context kube-poc


# Create Dockerconfig
    - name: Create Dockerconfig
      run: |-
        mkdir -p ${HOME}/.kube
        echo "${{ secrets.DOCKER_CONFIG }}" | base64 --decode > ${HOME}/.docker/config.json
        # cat ${HOME}/.docker/config.json


# Build the Docker image / Dockerize
    - name: Build
      run: |-
        docker build \
          --tag "$REPO/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .


# Push the Docker image to JFROG Artifactory Container Registry
    - name: Publish
      run: |-
        docker push "$REPO/$IMAGE:$GITHUB_SHA"


# Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize


# Create regcred secrets
    - name: Create regcred secrets for cluster
      run: |-
        mkdir -p secrets
        echo "${{ secrets.DOCKER_CONFIG }}" | base64 --decode > secrets/.dockerconfigjson  


# Deploy the Docker image to the Kubernetes cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image REPO/IMAGE:TAG=$REPO/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide


